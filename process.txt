----------------------------------------------------------------------------------
Current Tasks---

Routing enable in frontend and backend
Login/ register frontend and backend
Login/ register Auth service & middleware

----------------------------------------------------------------------------------


Modules:
** Routing     
frontend:-
--> Navigation

backend:-
--> Routes


** Login/Register
 frontend:-
 --> Login page
 --> Register page
 --> Auth service

 backend:-
 -->Login api
 --> Register API
 --> Auth middleware

database:-
--> User model


** Assessment:-











** Dashboard





** Planning for 30, 60, 90 days




** Logout








----------------------------------------------------------------------------------
Development Process

checkout the process and all - https://chatgpt.com/share/672add75-46e0-8008-90db-77a76abe8726

Phase 1: Project Planning & Setup

Define Requirements:

Detail the app's features: registration, personality assessment, task generation, task tracking, etc.
Document these features as user stories in a shared platform like Jira, Trello, or GitHub Projects.
Create a timeline, setting milestones for each major feature.



Design Database Schema:

Database schema design (e.g., MongoDB) includes tables for User, Task, and Assessment.
Ensure each table has clear relationships, such as linking tasks to user accounts.


Define Folder Structure:

Backend: Use folders for controllers, models, routes, and middlewares.
Frontend: Organize components by feature in folders (e.g., auth, tasks, profile).
Set up the folder structure and commit an initial project structure to version control (e.g., GitHub or GitLab).
Set Up Project Environment:

Backend: Initialize a Node.js project, set up Express, and MongoDB connection.
Frontend: Initialize a React Native project with basic navigation and screens.
Create environment variables for sensitive data (e.g., JWT secret, database credentials).
Set up Git for version control, with a branching strategy like feature branching.
Design the UI/UX:

Create wireframes or mockups of the app screens (registration, home, tasks, profile).
Use tools like Figma or Adobe XD and share designs with the team for feedback.



Phase 2: Backend API Development

User Authentication:

Implement JWT-based authentication for registration and login.
Create routes for login, registration, and logout in authController.js.
Assessment & Task Generation:

Create the API endpoint for submitting personality assessments.
Develop the task generation logic to create 30-day tasks based on assessment data.
Implement routes for creating, retrieving, and updating tasks (taskController.js).
Testing & Documentation:

Create tests for each endpoint to ensure functionality and catch errors early.
Document each API endpoint (e.g., POST /api/register, GET /api/tasks), specifying request parameters and responses.
Database Testing:

Verify that data is correctly stored and retrieved, using tools like Postman to test API endpoints.




Phase 3: Frontend Development

Implement Core Screens:

Auth Screens: Create screens for login and registration.
Personality Assessment Screen: Develop a form that collects assessment responses.
Home Screen: Display a summary of tasks and the userâ€™s progress.
Task List & Task Detail Screens: Show the list of tasks and allow marking tasks as complete.
Integrate APIs:

Use Axios or Fetch to connect frontend screens to backend APIs (e.g., for user authentication, task fetching, task completion).
Ensure proper error handling and display feedback (e.g., "Task marked as complete").
UI Enhancements:

Implement reusable components, like Button, Card, TaskItem, for consistent design.
Add loaders and status messages for a smooth user experience.
Navigation:

Set up stack and tab navigation using React Navigation for seamless screen transitions.



Phase 4: Quality Assurance (QA) and Testing

Testing Functionalities:

Test each functionality (registration, task generation, task completion) across various devices (if possible).
Write test cases for different user flows (e.g., register -> complete assessment -> view tasks -> complete tasks).
Use tools like Jest and React Native Testing Library to create unit and integration tests for critical components.
Bug Tracking:

Log bugs in a tracking system (e.g., Jira or GitHub Issues) and assign them to relevant team members for resolution.
Prioritize fixing critical bugs, such as API issues, data inconsistencies, and UI glitches.
Performance Testing:

Test API response times, app load time, and smoothness of navigation.
Optimize code, minimize redundant API calls, and reduce bundle size as needed.



Phase 5: Final Adjustments & Deployment

Final Code Review & Documentation:

Conduct a final code review session, ensuring consistent code quality and readability.
Document key parts of the codebase, especially complex logic (e.g., task generation).
Update README files with setup and usage instructions.
App Store Preparation (Optional):

If planning to publish, prepare App Store and Play Store accounts.
Generate app builds using Expo or React Native CLI for both iOS and Android.
Backend Deployment:

Deploy the backend on a cloud provider (e.g., AWS, DigitalOcean, Heroku).
Set up a database service (e.g., MongoDB Atlas) and ensure security measures like HTTPS and JWT expiration.
Launch and Feedback:

Share the app with a small group for user feedback.
Fix any remaining minor bugs and prepare for a larger release.

----------------------------------------------------------------------------------



Colour code--------------------

/* CSS HEX */
 --governor-bay: #3230be;
--moon-raker: #dbc5f4;
--jacksons-purple: #292799;
--haiti: #08081f;
--lucky-point: #1c1b6c;
--bunting: #14144b;
--manatee: #8c8cab;
--lilac-bush: #9d74d6;
--comet: #585778;
--east-bay: #4c4c79;


/* SCSS HEX */
$governor-bay: #3230be;
$moon-raker: #dbc5f4;
$jacksons-purple: #292799;
$haiti: #08081f;
$lucky-point: #1c1b6c;
$bunting: #14144b;
$manatee: #8c8cab;
$lilac-bush: #9d74d6;
$comet: #585778;
$east-bay: #4c4c79;


/* SCSS RGB */
--governor-bay: rgba(50,48,190,1);
--moon-raker: rgba(219,197,244,1);
--jacksons-purple: rgba(41,39,153,1);
--haiti: rgba(8,8,31,1);
--lucky-point: rgba(28,27,108,1);
--bunting: rgba(20,20,75,1);
--manatee: rgba(140,140,171,1);
--lilac-bush: rgba(157,116,214,1);
--comet: rgba(88,87,120,1);
--east-bay: rgba(76,76,121,1);
